%> @file HyPHM.m The main page of this documentation.
%>
%> @mainpage HyPHM Documentation
%>
%>
%> This is <b>HyPHM</b> &mdash; a flexible numerical toolbox for the
%> <i>prototyping</i> of two-scale transport and
%> flow problems on 2D domains.
%>
%> <center>
%> @image html logo-big.jpg
%>
%>   <b>Hy</b>drolocigal
%>   <b>P</b>arallel
%>   <b>H</b>eterogeneous
%>   <b>M</b>odeling  </center>
%>
%> The toolbox <b>HyPHM</b> was developed to rapidly build and solve
%> hydrogeology-related problems, especially those steming from the periodic
%> homogenization theory.  The code is object-oriented, runs parallel
%> on multi-core processors and is mainly written in the Matlab syntax.
%> There are currently two implemented general solvers, which work on
%> unstructured triangular 2D-grids (which may contain interior holes/obstacles):
%>
%> - a flexible <b>convection&ndash;diffusion&ndash;reaction</b> solver (cf. class Transport) and
%> - a solver for the <b>(Navier&ndash;)Stokes</b> problem (cf. classes Stokes, NavierStokes).
%>
%>
%>
%> @section intro Introduction
%> The toolbox <b>HyPHM</b> provides a framework for continuum modeling by
%> second-order partial differential equations using <i>mixed finite
%> elements</i> in two spatial dimensions.
%>
%> For space discretization, <i>unstructured triangular grids</i> are used, which
%> may contain an arbitrary number of interior holes.  <b>HyPHM</b> provides
%> besides manual grid definition the option to import grids that are generated by
%> the Matlab PDE toolbox or by the mesh generator @ref gmsh.
%>
%>
%> Currently, a (Navier&ndash;)Stokes solver and a solver for
%> convection&ndash;diffusion&ndash;reaction problems are available.
%> The coefficient functions of the problems may be given as algebraic time- and
%> space dependent functions, or as discrete data sets.
%> The latter option provides the possibility for realizing couplings of the
%> different problems by using solution data as coefficient input for other
%> problems. Different <i>boundary types</i> can be chosen independently of each other for each edge
%> of the grid, where the most established boundary types were successfully
%> implemented.   <i>Periodic boundary conditions</i> are also available for each
%> solver, which are required at most by solving cell problems arising in periodic
%> homogenization procedures.  These boundary conditions are implemented in
%> an <i>implicit</i> way, using a <i>grid-folding technique</i>.  Optionally, <i>mean
%> value contraints</i> may be imposed for the scalar unknown of each problem in order
%> to ensure well-posedness, which may be lost for some choices of boundary
%> conditions.
%>
%> The time discretization follows an implicit Euler scheme using a variable
%> time-step size (i.e., a time adaption could easily be integrated as well).
%>
%> By now, Matlab has two key ways to write parallel code: the concept
%> of parallel "for loops" (<tt>parfor</tt>) and that of
%> single-program-multiple-data (<tt>spmd</tt>).  For the parallelization with
%> respect to the assembly of the stiffness matrices, the latter one has approved.
%>instance
%> The data for flux and scalar finite element solutions can be stored in the
%> vtk file format, which subsequently can be used for the visualization using
%> third-party software like @ref paraview or @ref mayavi (both multi-platform and freely available).
%>
%>
%>
%> @section classoverview Quick Overview of the Main Classes
%>
%> @subsection subsection1 1. Spatial Discretization
%>   The Grid represents the discrete version of a spatial domain.  An instance of Grid provides all geometric
%>   and grid-topological information required for an assembly.
%>   Periodic boundary conditions are realized by
%>   FoldedGrid.  Problems on onedimensional manifolds may use SurfaceGrid.
%>
%> @subsection subsection2 2. Time Discretization
%>   An instance of the class Stepper contains information about the time decomposition as, for example,
%>   the current time step number, the current time step size, and the estimated remaining computation time.
%>
%> @subsection subsection3 3. Unknowns, Coefficients, and Boundary Data
%>   These are realized by the class Variable.  Coefficients realized by instances of Variable may either be defined
%>   by time and space dependent algebraic formulations or by raw data.  The first option provides a fast way
%>   for the user to initialize coefficients, the latter one the possibility of using unknowns of another
%>   problems to be mounted as coefficients.
%>
%> @subsection subsection4 4. Solving a Problem
%>   The coefficients and boundary data given by Variable have to be mounted to
%>   a problem.  The currently provided problem classes are Transport, Stokes, and NavierStokes.
%>   The very generally formulated problem classes can be simplified to subproblems
%>   by leaving specific coefficients unmounted (as long as the problem does not
%>   degenerate or becomes ill-posed).  Options such as stabilization strategies or balance contraints
%>   may be set by flags.  Periodic boundary conditions can be used by simply using an instance of
%>   FoldedGrid instead of one of the class Grid.
%>
%> @subsection subsection5 5. Visualization
%>   All coefficients and unknowns realized by instances of Variable
%>   may be visualized by means of a time-series of vtk files (see @ref paraview).
%>
%> @section getstarted Getting Started
%> The model problem formulation can be performed in the Matlab command window.  However, there
%> is the possibility to create Matlab script files, stored in the directory
%> ./scripts, see <a href="dirs.html">Directories</a>.
%>
%> For tutorials, see <a href="pages.html">Related Pages</a>.
%>
%> @section support Support
%> Please report bugs to frank[at]math.fau.de.
%>
%> @n @n
%> <small>Copyright 2009&ndash;2021 Florian Frank @n
%> Hydrogeology, Institute of Geo-Sciences, Friedrich&ndash;Schiller&ndash;University of Jena @n
%> Applied Mathematics, Department of Mathematics, University of Erlangen&ndash;Nuremberg @n
%> G E R M A N Y @n@n
%> http://www1.am.uni-erlangen.de/HyPHM</small>@n

%> @param scriptname Matlab script file name without ending
%> @param varargin 1: maximum number of Matlab workers to use

function HyPHM(scriptname, varargin)
global isOctave
global isMatlab % complementary to isOctave at the moment

if nargin == 2, maxworkers = varargin{1}; end %#ok<NASGU>

if exist('OCTAVE_VERSION') %#ok<EXIST>
    isOctave = true;
else
    isOctave = false;
end
isMatlab = ~isOctave;


%%%%%%%%%%%%%%%

%% Set Paths %%
%%%%(scripts in directory private)

if isOctave
    addpath('./private') % assume we are in the HyPHM directory!
end
setenv('PATH', [getenv('PATH'), ':/opt/common/bin']);
checkdir % proof, if working directory is HyPHM-root
setpath % collection of all paths to be included


%%%%%%%%%%%%%%%%%%%%

%% Check Argument %%
%%%%%%%%%%%%%%%%%%%%

if ~exist('scriptname') || ~ischar(scriptname) %#ok<EXIST> % wrong arguments
    type = 'error';
elseif strcmp(scriptname, 'doc') % make documentation via doxygen
    type = 'documentation';
elseif strcmp(scriptname, 'pub') % publish documentation to my website
    type = 'publish';
elseif strcmp(scriptname, 'end') || strcmp(scriptname, 'close')
    type = 'close';
else % call script
    type = 'script';
end


%%%%%%%%%%%%%%%%%%%%%%%

%% Apply Destination %%
%%%%%%%%%%%%%%%%%%%%%%%

switch type
    case 'error'
        funname = 'HyPHM';
        printline(3, 'Call %s(scriptname), where scriptname must be a string.', funname)
        printline(3, 'There are the following script patterns:')
        dir ./ scripts / patterns / * .m
        printline(2, 'Example call of a script')
        printline(3, '%s(''stdDarcy'')', funname)
        printline(2, 'Documentation')
        printline(3, '%s(''doc'')\n', funname)
        return
    case 'close'
        printline(3, 'Closing Matlab workers and clearing memory.')
        matlabpool close force local
        clear all
        return
    case 'documentation'
        unix('doxygen ./doc/DoxyfileHyPHM') % generate html documentation
        printline(2, 'Documentation')
        printline(3, 'Documentation generated in ./doc/html\n')
        return
    case 'publish'
        w = what;
        printline(1, 'Copying files to /home/am1www/am1www/HyPHM.')
        printline(1, 'Access documentation at http://www1.am.uni-erlangen.de/HyPHM/.')
        unix('cp -R doc/html/* /home/am1www/am1www/HyPHM');
        return
    case 'script' % Evaluation of the HyPHM script
        printline(3, 'Changing output format to compact longE')
        format('compact')
        if isMatlab, format('longE'), end
        if isOctave, format long E, end
        goparallel % initialization of possible matlab-workers (dep.: maxworkers)
        printline(3, 'Clearing persistent variables')
        clear functions % important to kill persistent variables
        tic % start timer for total evaluation time of script

        % call the user script
        eval(scriptname)
        printline(2, 'Total evaluation time for this script')
        printline(3, '%s sec', toc)

        % save data since the memory is cleared after leaving this function
        printline(2, 'Store Data.')
        savename = ['data/', scriptname, ' ', datestr(now), '.mat'];
        printline(3, 'Save data to ''%s''.', savename)
        save(savename)

end % switch type

end
