%> @file locMatAlg.m Assembly of a local assembly matrix under consideration of the global orientation.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%> @param  this  problem class [ TransportLEVEL ]
%> @param  kT    number of element  [ scalar ]
%> @param  di  the inverse diffusion coefficient [ 2 x 2]
%>
%> @retval stiff  local assembly matrix @f$[\int_T D^-1 \vec{phi}_k \cdot\vec{phi}_j]_{j,k}@f$ [3 x 3]
%>

function stiff = locMatAlg(this, kT, di)

g = this.grid;
s = g.sigE0T(kT, :); % signi of local edges
J = reshape(g.A(kT, :, :), 2, 2); %improved SG
arE = g.areaE(g.E0T(kT, :));

%
%
stiff = [(arE(1)^2 * s(1)^2 * (2 * J(1, 1)^2 * di(1, 1) + 2 * J(1, 2)^2 * di(1, 1) + 2 * J(2, 1)^2 * di(2, 2) + 2 * J(2, 2)^2 * di(2, 2) + 2 * J(1, 1) * J(1, 2) * di(1, 1) + 2 * J(1, 1) * J(2, 1) * di(1, 2) + J(1, 1) * J(2, 2) * di(1, 2) + J(1, 2) * J(2, 1) * di(1, 2) + 2 * J(1, 2) * J(2, 2) * di(1, 2) + 2 * J(1, 1) * J(2, 1) * di(2, 1) + J(1, 1) * J(2, 2) * di(2, 1) + J(1, 2) * J(2, 1) * di(2, 1) + 2 * J(1, 2) * J(2, 2) * di(2, 1) + 2 * J(2, 1) * J(2, 2) * di(2, 2))) / (12 * sqrt(2)^2), ...
    -(2^(1 / 2) * arE(1) * arE(2) * s(1) * s(2) * (2 * J(1, 1)^2 * di(1, 1) - 2 * J(1, 2)^2 * di(1, 1) + 2 * J(2, 1)^2 * di(2, 2) - 2 * J(2, 2)^2 * di(2, 2) + 2 * J(1, 1) * J(1, 2) * di(1, 1) + 2 * J(1, 1) * J(2, 1) * di(1, 2) + 3 * J(1, 1) * J(2, 2) * di(1, 2) - J(1, 2) * J(2, 1) * di(1, 2) - 2 * J(1, 2) * J(2, 2) * di(1, 2) + 2 * J(1, 1) * J(2, 1) * di(2, 1) - J(1, 1) * J(2, 2) * di(2, 1) + 3 * J(1, 2) * J(2, 1) * di(2, 1) - 2 * J(1, 2) * J(2, 2) * di(2, 1) + 2 * J(2, 1) * J(2, 2) * di(2, 2))) / (24 * sqrt(2) * 1), ...
    -(2 * 2^(1 / 2) * J(1, 2)^2 * arE(1) * arE(3) * di(1, 1) * s(1) * s(3) - 2 * 2^(1 / 2) * J(1, 1)^2 * arE(1) * arE(3) * di(1, 1) * s(1) * s(3) - 2 * 2^(1 / 2) * J(2, 1)^2 * arE(1) * arE(3) * di(2, 2) * s(1) * s(3) + 2 * 2^(1 / 2) * J(2, 2)^2 * arE(1) * arE(3) * di(2, 2) * s(1) * s(3) + 2 * 2^(1 / 2) * J(1, 1) * J(1, 2) * arE(1) * arE(3) * di(1, 1) * s(1) * s(3) - 2 * 2^(1 / 2) * J(1, 1) * J(2, 1) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) - 2^(1 / 2) * J(1, 1) * J(2, 2) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) + 3 * 2^(1 / 2) * J(1, 2) * J(2, 1) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) + 2 * 2^(1 / 2) * J(1, 2) * J(2, 2) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) - 2 * 2^(1 / 2) * J(1, 1) * J(2, 1) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) + 3 * 2^(1 / 2) * J(1, 1) * J(2, 2) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) - 2^(1 / 2) * J(1, 2) * J(2, 1) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) + 2 * 2^(1 / 2) * J(1, 2) * J(2, 2) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) + 2 * 2^(1 / 2) * J(2, 1) * J(2, 2) * arE(1) * arE(3) * di(2, 2) * s(1) * s(3)) / (24 * sqrt(2) * 1); ...
    -(2^(1 / 2) * arE(1) * arE(2) * s(1) * s(2) * (2 * J(1, 1)^2 * di(1, 1) - 2 * J(1, 2)^2 * di(1, 1) + 2 * J(2, 1)^2 * di(2, 2) - 2 * J(2, 2)^2 * di(2, 2) + 2 * J(1, 1) * J(1, 2) * di(1, 1) + 2 * J(1, 1) * J(2, 1) * di(1, 2) - J(1, 1) * J(2, 2) * di(1, 2) + 3 * J(1, 2) * J(2, 1) * di(1, 2) - 2 * J(1, 2) * J(2, 2) * di(1, 2) + 2 * J(1, 1) * J(2, 1) * di(2, 1) + 3 * J(1, 1) * J(2, 2) * di(2, 1) - J(1, 2) * J(2, 1) * di(2, 1) - 2 * J(1, 2) * J(2, 2) * di(2, 1) + 2 * J(2, 1) * J(2, 2) * di(2, 2))) / (24 * sqrt(2) * 1), ...
    (arE(2)^2 * s(2)^2 * (6 * J(1, 1)^2 * di(1, 1) + 2 * J(1, 2)^2 * di(1, 1) + 6 * J(2, 1)^2 * di(2, 2) + 2 * J(2, 2)^2 * di(2, 2) - 6 * J(1, 1) * J(1, 2) * di(1, 1) + 6 * J(1, 1) * J(2, 1) * di(1, 2) - 3 * J(1, 1) * J(2, 2) * di(1, 2) - 3 * J(1, 2) * J(2, 1) * di(1, 2) + 2 * J(1, 2) * J(2, 2) * di(1, 2) + 6 * J(1, 1) * J(2, 1) * di(2, 1) - 3 * J(1, 1) * J(2, 2) * di(2, 1) - 3 * J(1, 2) * J(2, 1) * di(2, 1) + 2 * J(1, 2) * J(2, 2) * di(2, 1) - 6 * J(2, 1) * J(2, 2) * di(2, 2))) / (24 * 1^2), ...
    -(arE(2) * arE(3) * s(2) * s(3) * (2 * J(1, 1)^2 * di(1, 1) + 2 * J(1, 2)^2 * di(1, 1) + 2 * J(2, 1)^2 * di(2, 2) + 2 * J(2, 2)^2 * di(2, 2) - 6 * J(1, 1) * J(1, 2) * di(1, 1) + 2 * J(1, 1) * J(2, 1) * di(1, 2) - J(1, 1) * J(2, 2) * di(1, 2) - 5 * J(1, 2) * J(2, 1) * di(1, 2) + 2 * J(1, 2) * J(2, 2) * di(1, 2) + 2 * J(1, 1) * J(2, 1) * di(2, 1) - 5 * J(1, 1) * J(2, 2) * di(2, 1) - J(1, 2) * J(2, 1) * di(2, 1) + 2 * J(1, 2) * J(2, 2) * di(2, 1) - 6 * J(2, 1) * J(2, 2) * di(2, 2))) / (24 * 1 * 1); ...
    -(2 * 2^(1 / 2) * J(1, 2)^2 * arE(1) * arE(3) * di(1, 1) * s(1) * s(3) - 2 * 2^(1 / 2) * J(1, 1)^2 * arE(1) * arE(3) * di(1, 1) * s(1) * s(3) - 2 * 2^(1 / 2) * J(2, 1)^2 * arE(1) * arE(3) * di(2, 2) * s(1) * s(3) + 2 * 2^(1 / 2) * J(2, 2)^2 * arE(1) * arE(3) * di(2, 2) * s(1) * s(3) + 2 * 2^(1 / 2) * J(1, 1) * J(1, 2) * arE(1) * arE(3) * di(1, 1) * s(1) * s(3) - 2 * 2^(1 / 2) * J(1, 1) * J(2, 1) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) + 3 * 2^(1 / 2) * J(1, 1) * J(2, 2) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) - 2^(1 / 2) * J(1, 2) * J(2, 1) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) + 2 * 2^(1 / 2) * J(1, 2) * J(2, 2) * arE(1) * arE(3) * di(1, 2) * s(1) * s(3) - 2 * 2^(1 / 2) * J(1, 1) * J(2, 1) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) - 2^(1 / 2) * J(1, 1) * J(2, 2) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) + 3 * 2^(1 / 2) * J(1, 2) * J(2, 1) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) + 2 * 2^(1 / 2) * J(1, 2) * J(2, 2) * arE(1) * arE(3) * di(2, 1) * s(1) * s(3) + 2 * 2^(1 / 2) * J(2, 1) * J(2, 2) * arE(1) * arE(3) * di(2, 2) * s(1) * s(3)) / (24 * sqrt(2) * 1), ...
    -(arE(2) * arE(3) * s(2) * s(3) * (2 * J(1, 1)^2 * di(1, 1) + 2 * J(1, 2)^2 * di(1, 1) + 2 * J(2, 1)^2 * di(2, 2) + 2 * J(2, 2)^2 * di(2, 2) - 6 * J(1, 1) * J(1, 2) * di(1, 1) + 2 * J(1, 1) * J(2, 1) * di(1, 2) - 5 * J(1, 1) * J(2, 2) * di(1, 2) - J(1, 2) * J(2, 1) * di(1, 2) + 2 * J(1, 2) * J(2, 2) * di(1, 2) + 2 * J(1, 1) * J(2, 1) * di(2, 1) - J(1, 1) * J(2, 2) * di(2, 1) - 5 * J(1, 2) * J(2, 1) * di(2, 1) + 2 * J(1, 2) * J(2, 2) * di(2, 1) - 6 * J(2, 1) * J(2, 2) * di(2, 2))) / (24 * 1 * 1), ...
    (arE(3)^2 * s(3)^2 * (2 * J(1, 1)^2 * di(1, 1) + 6 * J(1, 2)^2 * di(1, 1) + 2 * J(2, 1)^2 * di(2, 2) + 6 * J(2, 2)^2 * di(2, 2) - 6 * J(1, 1) * J(1, 2) * di(1, 1) + 2 * J(1, 1) * J(2, 1) * di(1, 2) - 3 * J(1, 1) * J(2, 2) * di(1, 2) - 3 * J(1, 2) * J(2, 1) * di(1, 2) + 6 * J(1, 2) * J(2, 2) * di(1, 2) + 2 * J(1, 1) * J(2, 1) * di(2, 1) - 3 * J(1, 1) * J(2, 2) * di(2, 1) - 3 * J(1, 2) * J(2, 1) * di(2, 1) + 6 * J(1, 2) * J(2, 2) * di(2, 1) - 6 * J(2, 1) * J(2, 2) * di(2, 2))) / (24 * 1^2)];
stiff = stiff / (g.areaT(kT) * 2);

end
