%> @file Variable/visualize.m Pipe the numerical data into vtk files.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%> @brief Pipe the numerical data into vtk files.
%>
%> The pvd-file is generated which points to a vtu for each time point.
%> The vtu-files itself are generated by calling visslice in the respective
%> type package directory for each step.  If the AbstractGrid is a
%> FoldedGrid it has to be unfolded to a before visualized.  This happens via the
%> package functions +type.unfolddata.m.  The Variable.type is maintained
%> here.
%>
%> Since vector-valued data are stored without underlying mesh,
%> such a one has to be generated first. For instance, in ParaView:
%> -# Load pvd file.
%> -# Filter @f$\rightarrow@f$ Delaunay2D.
%> -# Filter @f$\rightarrow@f$ Stream Tracer.
%> -# In Stream Tracer, set 'Interpolator Type' to 'Cell Locator' and set 'Seed Type' to 'Line Source'.
%>
%> @param this Instance of Variable.
%> @param varargin Folder name (optional).
%> @todo Parallelize slice visualization if advantageous.
%> @todo Check path such that Data is printed to HyPHM/vtk not elsewhere
function visualize(this, varargin)

if strcmp(this.name, '')
    warning('HyPHM:Variable:visualize:noname', ...
        'HyPHM: A Variable with no name is requested to be visualized.  Ignored.')
    return
end

% directory name should contain the host name (if this runs on different
% machines simultaneously) or be specified explicitely
switch nargin
    case 2 % save directory specifyed manually
        assert(ischar(varargin{1}), 'HyPHM: Optional argument of Variable.visualize has to be a string specifying a directory to store the data.')
        savedir = varargin{1};
    otherwise % save directory from host name
        [dummy, savedir] = unix('hostname'); %#ok<ASGLU>
        savedir(end) = []; % kill '\0'
end
% check, whether the directory already exists
if ~exist(['./vtk/', savedir], 'dir')
    mkdir(['./vtk/', savedir]);
end

% data may not be set for every time step of stepper
% limit will indicate last time instance data are set
for limit = 0:this.stepper.numsteps
    try
        data = this.getdata(limit);
    catch
        limit = limit - 1;
        break
    end
end

filenames = cell(limit+1, 1);
timepts = zeros(limit+1, 1);

for k = 0:limit
    filenames{k+1} = [this.name, '.', num2str(k), '.vtu'];
    timepts(k+1) = this.stepper.timeofstep(k);
end

vtkseries(timepts, filenames, ['./vtk/', savedir, '/', this.name, '.pvd']);

% call the visslice function in the type package directory for each time point
for k = 0:limit
    filename = ['./vtk/', savedir, '/', filenames{k + 1}]; %#ok<NASGU>
    data = this.getdata(k); %#ok<NASGU>
    if numel(this.grids) == 1 || numel(this.grids{2}) == 0
        % each time step has its own grid
        eval(sprintf('%s.visslice(this.grid, this.name, filename, data)', this.type));
    else
        eval(sprintf('%s.visslice(this.grids{k+1}, this.name, filename, data)', this.type));
        % one grid for all time steps
    end
end

printline(3, 'Data for %s written to %s', this.name, ['./vtk/', savedir, '/', this.name, '.pvd'])

end
