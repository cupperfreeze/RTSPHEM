% locD performs the assembly of a local assembly matrix
% under consideration of the global orientation.
%
% Input
%   d        [ NavierStokes ]  data required by solver
%   kT       [ scalar ]        number of current element
%   uloc     [ 6x1 ]           local x-velocity representation
%   vloc     [ 6x1 ]           local v-velocity representation
%
% Output
%   stiff    [6 x 6]             local assembly matrix
%
%   stiff(N', N) = <uloc dxphi_N, phi_N'> + <vloc dyphi_N, phi_N'> ,  N, N' = 1,...,6.
%

function stiff = locD(d, kT, uloc, vloc)

Du1 = ...
    [-13 / 420, -1 / 140, 0, 1 / 105, -1 / 105, 4 / 105; ...
    1 / 280, -1 / 280, 0, 1 / 630, -1 / 630, 0; ...
    1 / 280, 11 / 2520, 0, -2 / 315, 2 / 315, -1 / 126; ...
    -1 / 210, -1 / 126, 0, -2 / 105, 2 / 105, 4 / 315; ...
    -2 / 105, -2 / 315, 0, -4 / 315, 4 / 315, 8 / 315; ...
    -2 / 105, -4 / 315, 0, -2 / 315, 2 / 315, 2 / 63];

Du2 = ...
    [1 / 280, -1 / 280, 0, 1 / 630, -1 / 630, 0; ...
    1 / 140, 13 / 420, 0, 1 / 105, -1 / 105, -4 / 105; ...
    -11 / 2520, -1 / 280, 0, -2 / 315, 2 / 315, 1 / 126; ...
    2 / 315, 2 / 105, 0, -4 / 315, 4 / 315, -8 / 315; ...
    1 / 126, 1 / 210, 0, -2 / 105, 2 / 105, -4 / 315; ...
    4 / 315, 2 / 105, 0, -2 / 315, 2 / 315, -2 / 63];

Du3 = ...
    [1 / 280, 11 / 2520, 0, -2 / 315, 2 / 315, -1 / 126; ...
    -11 / 2520, -1 / 280, 0, -2 / 315, 2 / 315, 1 / 126; ...
    1 / 140, -1 / 140, 0, 1 / 21, -1 / 21, 0; ...
    2 / 315, -4 / 315, 0, 2 / 105, -2 / 105, 2 / 315; ...
    4 / 315, -2 / 315, 0, 2 / 105, -2 / 105, -2 / 315; ...
    1 / 126, -1 / 126, 0, -2 / 315, 2 / 315, 0];

Du4 = ...
    [-1 / 210, -1 / 126, 0, -2 / 105, 2 / 105, 4 / 315; ...
    2 / 315, 2 / 105, 0, -4 / 315, 4 / 315, -8 / 315; ...
    2 / 315, -4 / 315, 0, 2 / 105, -2 / 105, 2 / 315; ...
    4 / 105, 4 / 63, 0, 16 / 105, -16 / 105, -32 / 315; ...
    -2 / 315, 2 / 315, 0, 8 / 105, -8 / 105, 0; ...
    -2 / 315, 2 / 63, 0, 16 / 315, -16 / 315, -8 / 315];

Du5 = ...
    [-2 / 105, -2 / 315, 0, -4 / 315, 4 / 315, 8 / 315; ...
    1 / 126, 1 / 210, 0, -2 / 105, 2 / 105, -4 / 315; ...
    4 / 315, -2 / 315, 0, 2 / 105, -2 / 105, -2 / 315; ...
    -2 / 315, 2 / 315, 0, 8 / 105, -8 / 105, 0; ...
    -4 / 63, -4 / 105, 0, 16 / 105, -16 / 105, 32 / 315; ...
    -2 / 63, 2 / 315, 0, 16 / 315, -16 / 315, 8 / 315];

Du6 = ...
    [-2 / 105, -4 / 315, 0, -2 / 315, 2 / 315, 2 / 63; ...
    4 / 315, 2 / 105, 0, -2 / 315, 2 / 315, -2 / 63; ...
    1 / 126, -1 / 126, 0, -2 / 315, 2 / 315, 0; ...
    -2 / 315, 2 / 63, 0, 16 / 315, -16 / 315, -8 / 315; ...
    -2 / 63, 2 / 315, 0, 16 / 315, -16 / 315, 8 / 315; ...
    -4 / 63, 4 / 63, 0, 16 / 315, -16 / 315, 0];

Dv1 = ...
    [-13 / 420, 0, -1 / 140, 1 / 105, 4 / 105, -1 / 105; ...
    1 / 280, 0, 11 / 2520, -2 / 315, -1 / 126, 2 / 315; ...
    1 / 280, 0, -1 / 280, 1 / 630, 0, -1 / 630; ...
    -1 / 210, 0, -1 / 126, -2 / 105, 4 / 315, 2 / 105; ...
    -2 / 105, 0, -4 / 315, -2 / 315, 2 / 63, 2 / 315; ...
    -2 / 105, 0, -2 / 315, -4 / 315, 8 / 315, 4 / 315];

Dv2 = ...
    [1 / 280, 0, 11 / 2520, -2 / 315, -1 / 126, 2 / 315; ...
    1 / 140, 0, -1 / 140, 1 / 21, 0, -1 / 21; ...
    -11 / 2520, 0, -1 / 280, -2 / 315, 1 / 126, 2 / 315; ...
    2 / 315, 0, -4 / 315, 2 / 105, 2 / 315, -2 / 105; ...
    1 / 126, 0, -1 / 126, -2 / 315, 0, 2 / 315; ...
    4 / 315, 0, -2 / 315, 2 / 105, -2 / 315, -2 / 105];

Dv3 = ...
    [1 / 280, 0, -1 / 280, 1 / 630, 0, -1 / 630; ...
    -11 / 2520, 0, -1 / 280, -2 / 315, 1 / 126, 2 / 315; ...
    1 / 140, 0, 13 / 420, 1 / 105, -4 / 105, -1 / 105; ...
    2 / 315, 0, 2 / 105, -4 / 315, -8 / 315, 4 / 315; ...
    4 / 315, 0, 2 / 105, -2 / 315, -2 / 63, 2 / 315; ...
    1 / 126, 0, 1 / 210, -2 / 105, -4 / 315, 2 / 105];

Dv4 = ...
    [-1 / 210, 0, -1 / 126, -2 / 105, 4 / 315, 2 / 105; ...
    2 / 315, 0, -4 / 315, 2 / 105, 2 / 315, -2 / 105; ...
    2 / 315, 0, 2 / 105, -4 / 315, -8 / 315, 4 / 315; ...
    4 / 105, 0, 4 / 63, 16 / 105, -32 / 315, -16 / 105; ...
    -2 / 315, 0, 2 / 63, 16 / 315, -8 / 315, -16 / 315; ...
    -2 / 315, 0, 2 / 315, 8 / 105, 0, -8 / 105];

Dv5 = ...
    [-2 / 105, 0, -4 / 315, -2 / 315, 2 / 63, 2 / 315; ...
    1 / 126, 0, -1 / 126, -2 / 315, 0, 2 / 315; ...
    4 / 315, 0, 2 / 105, -2 / 315, -2 / 63, 2 / 315; ...
    -2 / 315, 0, 2 / 63, 16 / 315, -8 / 315, -16 / 315; ...
    -4 / 63, 0, 4 / 63, 16 / 315, 0, -16 / 315; ...
    -2 / 63, 0, 2 / 315, 16 / 315, 8 / 315, -16 / 315];

Dv6 = ...
    [-2 / 105, 0, -2 / 315, -4 / 315, 8 / 315, 4 / 315; ...
    4 / 315, 0, -2 / 315, 2 / 105, -2 / 315, -2 / 105; ...
    1 / 126, 0, 1 / 210, -2 / 105, -4 / 315, 2 / 105; ...
    -2 / 315, 0, 2 / 315, 8 / 105, 0, -8 / 105; ...
    -2 / 63, 0, 2 / 315, 16 / 315, 8 / 315, -16 / 315; ...
    -4 / 63, 0, -4 / 105, 16 / 105, 32 / 315, -16 / 105];

A = squeeze(d.grid.A(kT, :, :));

stiff = ...
    A(2, 2) * ...
    (uloc(1) * Du1 + uloc(2) * Du2 + uloc(3) * Du3 + uloc(4) * Du4 + uloc(5) * Du5 + uloc(6) * Du6) ...
    -A(2, 1) * ...
    (uloc(1) * Dv1 + uloc(2) * Dv2 + uloc(3) * Dv3 + uloc(4) * Dv4 + uloc(5) * Dv5 + uloc(6) * Dv6) ...
    -A(1, 2) * ...
    (vloc(1) * Du1 + vloc(2) * Du2 + vloc(3) * Du3 + vloc(4) * Du4 + vloc(5) * Du5 + vloc(6) * Du6) ...
    +A(1, 1) * ...
    (vloc(1) * Dv1 + vloc(2) * Dv2 + vloc(3) * Dv3 + vloc(4) * Dv4 + vloc(5) * Dv5 + vloc(6) * Dv6);

end
