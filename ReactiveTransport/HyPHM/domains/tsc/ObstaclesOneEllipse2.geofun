//! @file ObstaclesOneEllipse2.geofun Definition of the Gmsh function ObstaclesOneEllipse2 which returns a Line Loop(theloops[t]).
///////////////////////////////////////////////////////////////////////////
//! Input arguments ie variables which have to be previously defined are: t, eps, xtrans
//!
//! <b>Idea:</b> Define 8 points on ellipses, use them as control points for a spline.
//!
//! @f[\alpha = \mathrm{acos}\left(\frac{2r^2-h^2}{2r^2}\right)@f]
//!
//!
//!
//! <b>The bothersome controlpoint in the center of the ellipse is NOT generated here!</b>
//!

 

Function Obstacles // input: t, eps, xtrans   output: Line Loop(theloops[t])

  // rotation angle and radii of the ellipse
  rot =  Pi/4; 
  ra = 1/6;
  rb = 1/3;

  // make phi be a divisor of 2*Pi
  n = Floor(2*Pi/Acos((2*rb^2-h^2)/(2*rb^2)));
  phi = 2*Pi/n;

  // draw points on ellipsis
  For k In {0:n-1}
    // generate points around the origin
    p[k] = newp;
    Printf("Script  : p[%f] = (%f, %f).", k, rb*Sin(k*phi), rb*Cos(k*phi));
    Point(p[k]) = {rb*Sin(k*phi), rb*Cos(k*phi), 0, 1};
    // scale to radius ra in respective direction
    Dilate { {0, rb*Cos(k*phi), 0}, ra/rb } { Point{p[k]}; }
  EndFor

  // rotate ellipsis by angle phi 
  Rotate { {0, 0, 1}, { 0, 0, 0}, rot } {Point{p[]}; }
  
  // translate ellipsis to the center of the cell
  Translate { 0.5, 0.5, 0 } { Point{p[]}; } 

  // draw edges on ellipsis by polygon
  e[0] = newreg; Line(e[0]) = {p[n-1],p[0]};
  For k In {1:n-1}
    e[k] = newreg; Line(e[k]) = {p[k-1],p[k]};
  EndFor

   // draw edges on ellipsis by spline
 //  sp = newreg; Spline(sp) = {p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7],p[0]};

  // affine mapping to OMe
  Dilate { {0, 0, 0}, eps } { Point{p[]}; }
  If(xtrans != 0)
    Translate { xtrans, 0, 0 } { Point{p[]}; } 
  EndIf

  theloops[t] = newreg; Line Loop(theloops[t]) = {e[]};
  
  Printf("Script  : Line Loop(theloops[%g]) generated.", t);

Return

